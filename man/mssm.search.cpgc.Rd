% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mssm.R
\name{mssm.search.cpgc}
\alias{mssm.search.cpgc}
\title{Searches for a Max-Sum Submatrix using CPGC}
\usage{
mssm.search.cpgc(x, budget = 10, convergence = "time",
  verbose = FALSE, lowerBound = 0, lightFilter = FALSE,
  variableOrdering = NULL, lns = FALSE, lns.nRestarts = 100,
  lns.failureLimit = 500, lns.maxDiscrepancy = 2,
  lns.restartFilter = 70)
}
\arguments{
\item{x}{a matrix or a Java two-dimensionnal array of double (\code{\link[=mssm.asJavaMatrix]{mssm.asJavaMatrix()}}).}

\item{budget}{a limit to prevent long searches.
Its value is used in combination with parameter \code{convergence}.
It corresponds either to the maximum number of solutions without
improvement of the sum (if \code{convergence == "solution"}) or the
maximum number of seconds without improvements of the sum (if
\code{convergence == "time"}). See details of \code{convergence}.}

\item{convergence}{indicates criterions to abort the search. It can
be any of the following:
\describe{
\item{\code{"none"} or \code{-1}}{The search is not aborted. It will stop
only when completed, which means that the solution is optimal
(if \code{lns == FALSE}) or all lns restarts are done.}
\item{\code{"solution"} or \code{0}}{If the last \code{budget} solutions
identified did not improve the sum, the search is aborted.}
\item{\code{"time"} or \code{1}}{Abort the search if \code{budget} seconds have
elapsed since the last improving solution was found. This is the
default value.}
}}

\item{verbose}{indicates whether improving solutions should be
printed or not.}

\item{lowerBound}{is the expected minimum sum ot the submatrix to
find. No submatrix with sum below \code{lowerBound} will be considered
as a solution to store. Raising its value might improve the filtering
of non-optimal solution. This however can be diffucult to estimate
and a value above the optimal sum will prevent the identification of
any solution.}

\item{lightFilter}{reduces the computational cost of pruning the
search tree at the expense of a reduced filtering (if \code{lightFilter == TRUE}). It is preferable to set it to \code{FALSE} for very
large matrices as one prefer a stronger filtering of sub-optimal
solutions, even at the expense of some additional computations.}

\item{variableOrdering}{is an ordering of the columns indices. It
indicates which columns should be considered first for the branching.
A \code{NULL} value is associated to the natural ordering (\code{1:j} if
\code{javaMatrix} has \code{j} columns). It appears that columns with many
positive entries should be considered first in the search. See
\code{\link[=mssm.getHeuristicReordering]{mssm.getHeuristicReordering()}} as an example of column ordering.}

\item{lns}{allows the use of a large neighborhood search: after a
given number \code{lns.failureLimit} of backtracking (non improving
solutions), the search is restarted while fixing \code{lns.restartFilter}
percent of the columns of the best solution found so far.}

\item{lns.nRestarts}{is the number of restarts to perform if \code{lns}
is \code{TRUE}.}

\item{lns.failureLimit}{is the number of backtracks allowed for each
large neighborhood search.}

\item{lns.maxDiscrepancy}{is a limite on the number of discrepancies.
In the search tree, a discrepancy is counted whenever one explores the
right child of a node. Small values prevent the search of the full
tree but visit only the left-most branches. This should be considered
when you are confident with the variable ordering (see parameter
\code{variableOrdering}).}

\item{lns.restartFilter}{is the percentage of the columns of the best
solution found so far to keep in subsequent search. More precisely, at
each lns restart, \code{lns.restartFilter/100} of the columns of the best
solution are fixed and the search is performed on the non-fixed columns.}
}
\value{
A submatrix of maximal sum, represented as a list, with the
associated sum, columns and rows.
}
\description{
Searches for a submatrix of maximal sum using a Constraint
Programming with Global Constraint approach.
See \strong{\code{Details}} section for informations on the search
performed and the criterion required to complete it.
}
\details{
This function performs the search of a \emph{submatrix of maximal sum}
accordingly to its arguments.
A submatrix is a rectangular, non-necessarily contiguous, subset of rows
and of columns of a (larger) matrix.
A submatrix is of maximal sum if the sum of its entires (selected from
the original matrix) is of maximal sum.
The search is completed whenever it finds a provably optimal solution.
If parameter \code{lns} is \code{TRUE}, the search is completed whenever the
\code{lns.nRestarts} restarts have been done.
For some scenarios, one might wants to abort the search before completion.
This is doable through the combination of parameters \code{budget} and \code{convergence}.
}
\section{Maintainer}{
 Vincent Branders <vincent.branders@uclouvain.be>.
}

\seealso{
\code{\link[=mssm.asJavaMatrix]{mssm.asJavaMatrix()}} and \code{\link[=mssm.loadMatrix]{mssm.loadMatrix()}} to transform
a matrix to a Java matrix and to load a Java matrix from a file. See
also \code{\link[=mssm.getHeuristicReordering]{mssm.getHeuristicReordering()}} for an heuristic ordering of the
columns. See also package \link{mssm}.
}
